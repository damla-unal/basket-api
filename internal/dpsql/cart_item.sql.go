// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: cart_item.sql

package db

import (
	"context"
	"database/sql"
)

const createCartItem = `-- name: CreateCartItem :one
INSERT INTO cart_item (quantity,
                       cart_id,
                       product_id)
VALUES ($1, $2, $3)
RETURNING id, quantity, cart_id, product_id, discount
`

type CreateCartItemParams struct {
	Quantity  int64 `json:"quantity"`
	CartID    int64 `json:"cart_id"`
	ProductID int64 `json:"product_id"`
}

func (q *Queries) CreateCartItem(ctx context.Context, arg CreateCartItemParams) (CartItem, error) {
	row := q.db.QueryRow(ctx, createCartItem, arg.Quantity, arg.CartID, arg.ProductID)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.Quantity,
		&i.CartID,
		&i.ProductID,
		&i.Discount,
	)
	return i, err
}

const getCartItemsByCartID = `-- name: GetCartItemsByCartID :many
SELECT p.title as product_title, cart_id, quantity, cart_item.discount, product_id
FROM cart_item
         LEFT JOIN cart c on c.id = cart_item.cart_id
         LEFT JOIN product p on p.id = cart_item.product_id
WHERE cart_id = $1
`

type GetCartItemsByCartIDRow struct {
	ProductTitle sql.NullString `json:"product_title"`
	CartID       int64          `json:"cart_id"`
	Quantity     int64          `json:"quantity"`
	Discount     int64          `json:"discount"`
	ProductID    int64          `json:"product_id"`
}

func (q *Queries) GetCartItemsByCartID(ctx context.Context, cartID int64) ([]GetCartItemsByCartIDRow, error) {
	rows, err := q.db.Query(ctx, getCartItemsByCartID, cartID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCartItemsByCartIDRow{}
	for rows.Next() {
		var i GetCartItemsByCartIDRow
		if err := rows.Scan(
			&i.ProductTitle,
			&i.CartID,
			&i.Quantity,
			&i.Discount,
			&i.ProductID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertCartItem = `-- name: UpsertCartItem :exec
INSERT INTO cart_item (quantity, cart_id, product_id)
VALUES ($1, $2, $3)
ON CONFLICT (cart_id, product_id)
    DO UPDATE
    SET quantity = cart_item.quantity + excluded.quantity
`

type UpsertCartItemParams struct {
	Quantity  int64 `json:"quantity"`
	CartID    int64 `json:"cart_id"`
	ProductID int64 `json:"product_id"`
}

func (q *Queries) UpsertCartItem(ctx context.Context, arg UpsertCartItemParams) error {
	_, err := q.db.Exec(ctx, upsertCartItem, arg.Quantity, arg.CartID, arg.ProductID)
	return err
}
