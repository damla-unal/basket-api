// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: cart_item.sql

package db

import (
	"context"
	"database/sql"
)

const deleteAllCartItem = `-- name: DeleteAllCartItem :exec
DELETE
FROM cart_item
WHERE cart_id = $1
`

func (q *Queries) DeleteAllCartItem(ctx context.Context, cartID int64) error {
	_, err := q.db.Exec(ctx, deleteAllCartItem, cartID)
	return err
}

const deleteCartItem = `-- name: DeleteCartItem :exec
DELETE
FROM cart_item
WHERE id = $1
`

func (q *Queries) DeleteCartItem(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteCartItem, id)
	return err
}

const getCartItemDetailsByID = `-- name: GetCartItemDetailsByID :one
SELECT cart_item.id,
       quantity,
       cart_id,
       product_id,
       discount,
       cart_item.price,
       title   as prodcut_title,
       p.price as qty_price,
       vat     as product_vat
FROM cart_item
         LEFT JOIN product p on p.id = cart_item.product_id
WHERE cart_item.id = $1
`

type GetCartItemDetailsByIDRow struct {
	ID           int64         `json:"id"`
	Quantity     int64         `json:"quantity"`
	CartID       int64         `json:"cart_id"`
	ProductID    int64         `json:"product_id"`
	Discount     int64         `json:"discount"`
	Price        int64         `json:"price"`
	ProdcutTitle string        `json:"prodcut_title"`
	QtyPrice     sql.NullInt64 `json:"qty_price"`
	ProductVat   int64         `json:"product_vat"`
}

func (q *Queries) GetCartItemDetailsByID(ctx context.Context, id int64) (GetCartItemDetailsByIDRow, error) {
	row := q.db.QueryRow(ctx, getCartItemDetailsByID, id)
	var i GetCartItemDetailsByIDRow
	err := row.Scan(
		&i.ID,
		&i.Quantity,
		&i.CartID,
		&i.ProductID,
		&i.Discount,
		&i.Price,
		&i.ProdcutTitle,
		&i.QtyPrice,
		&i.ProductVat,
	)
	return i, err
}

const getCartItemsByCartID = `-- name: GetCartItemsByCartID :many
SELECT p.title as product_title,
       cart_id,
       cart_item.id,
       quantity,
       cart_item.discount,
       cart_item.price,
       product_id,
       p.price as qty_price,
       p.vat   as product_vat
FROM cart_item
         LEFT JOIN cart c on c.id = cart_item.cart_id
         LEFT JOIN product p on p.id = cart_item.product_id
WHERE cart_id = $1
`

type GetCartItemsByCartIDRow struct {
	ProductTitle sql.NullString `json:"product_title"`
	CartID       int64          `json:"cart_id"`
	ID           int64          `json:"id"`
	Quantity     int64          `json:"quantity"`
	Discount     int64          `json:"discount"`
	Price        int64          `json:"price"`
	ProductID    int64          `json:"product_id"`
	QtyPrice     sql.NullInt64  `json:"qty_price"`
	ProductVat   sql.NullInt64  `json:"product_vat"`
}

func (q *Queries) GetCartItemsByCartID(ctx context.Context, cartID int64) ([]GetCartItemsByCartIDRow, error) {
	rows, err := q.db.Query(ctx, getCartItemsByCartID, cartID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCartItemsByCartIDRow{}
	for rows.Next() {
		var i GetCartItemsByCartIDRow
		if err := rows.Scan(
			&i.ProductTitle,
			&i.CartID,
			&i.ID,
			&i.Quantity,
			&i.Discount,
			&i.Price,
			&i.ProductID,
			&i.QtyPrice,
			&i.ProductVat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCartItem = `-- name: UpdateCartItem :exec
UPDATE cart_item
SET quantity = $1,
    discount = $2,
    price    = $3
WHERE id = $4
`

type UpdateCartItemParams struct {
	Quantity int64 `json:"quantity"`
	Discount int64 `json:"discount"`
	Price    int64 `json:"price"`
	ID       int64 `json:"id"`
}

func (q *Queries) UpdateCartItem(ctx context.Context, arg UpdateCartItemParams) error {
	_, err := q.db.Exec(ctx, updateCartItem,
		arg.Quantity,
		arg.Discount,
		arg.Price,
		arg.ID,
	)
	return err
}

const upsertCartItem = `-- name: UpsertCartItem :exec
INSERT INTO cart_item (quantity, discount, cart_id, product_id, price)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (cart_id, product_id)
    DO UPDATE
    SET quantity = cart_item.quantity + excluded.quantity,
        price    = cart_item.price + excluded.price,
        discount = excluded.discount
`

type UpsertCartItemParams struct {
	Quantity  int64 `json:"quantity"`
	Discount  int64 `json:"discount"`
	CartID    int64 `json:"cart_id"`
	ProductID int64 `json:"product_id"`
	Price     int64 `json:"price"`
}

func (q *Queries) UpsertCartItem(ctx context.Context, arg UpsertCartItemParams) error {
	_, err := q.db.Exec(ctx, upsertCartItem,
		arg.Quantity,
		arg.Discount,
		arg.CartID,
		arg.ProductID,
		arg.Price,
	)
	return err
}
