// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "basket-api/internal/model"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// CartDAO is an autogenerated mock type for the CartDAO type
type CartDAO struct {
	mock.Mock
}

// GetCartByCustomerID provides a mock function with given fields: ctx, customerID
func (_m *CartDAO) GetCartByCustomerID(ctx context.Context, customerID int) (model.Cart, error) {
	ret := _m.Called(ctx, customerID)

	var r0 model.Cart
	if rf, ok := ret.Get(0).(func(context.Context, int) model.Cart); ok {
		r0 = rf(ctx, customerID)
	} else {
		r0 = ret.Get(0).(model.Cart)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCartByID provides a mock function with given fields: ctx, ID
func (_m *CartDAO) GetCartByID(ctx context.Context, ID int) (model.Cart, error) {
	ret := _m.Called(ctx, ID)

	var r0 model.Cart
	if rf, ok := ret.Get(0).(func(context.Context, int) model.Cart); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(model.Cart)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCartDAO interface {
	mock.TestingT
	Cleanup(func())
}

// NewCartDAO creates a new instance of CartDAO. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCartDAO(t mockConstructorTestingTNewCartDAO) *CartDAO {
	mock := &CartDAO{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
