// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "basket-api/internal/model"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ProductDAO is an autogenerated mock type for the ProductDAO type
type ProductDAO struct {
	mock.Mock
}

// GetProductByID provides a mock function with given fields: ctx, id
func (_m *ProductDAO) GetProductByID(ctx context.Context, id int) (model.Product, error) {
	ret := _m.Called(ctx, id)

	var r0 model.Product
	if rf, ok := ret.Get(0).(func(context.Context, int) model.Product); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProducts provides a mock function with given fields: ctx
func (_m *ProductDAO) ListProducts(ctx context.Context) ([]model.Product, error) {
	ret := _m.Called(ctx)

	var r0 []model.Product
	if rf, ok := ret.Get(0).(func(context.Context) []model.Product); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProductDAO interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductDAO creates a new instance of ProductDAO. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductDAO(t mockConstructorTestingTNewProductDAO) *ProductDAO {
	mock := &ProductDAO{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
