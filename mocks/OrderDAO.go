// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "basket-api/internal/model"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// OrderDAO is an autogenerated mock type for the OrderDAO type
type OrderDAO struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: ctx, cartToOrder
func (_m *OrderDAO) CreateOrder(ctx context.Context, cartToOrder model.Cart) error {
	ret := _m.Called(ctx, cartToOrder)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Cart) error); ok {
		r0 = rf(ctx, cartToOrder)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOrdersByCustomerID provides a mock function with given fields: ctx, customerID
func (_m *OrderDAO) GetOrdersByCustomerID(ctx context.Context, customerID int) ([]model.Order, error) {
	ret := _m.Called(ctx, customerID)

	var r0 []model.Order
	if rf, ok := ret.Get(0).(func(context.Context, int) []model.Order); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOrderDAO interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderDAO creates a new instance of OrderDAO. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderDAO(t mockConstructorTestingTNewOrderDAO) *OrderDAO {
	mock := &OrderDAO{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
