// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "basket-api/internal/model"
	context "context"

	mock "github.com/stretchr/testify/mock"

	request "basket-api/internal/model/request"
)

// CartService is an autogenerated mock type for the CartService type
type CartService struct {
	mock.Mock
}

// AddItemToCart provides a mock function with given fields: ctx, _a1
func (_m *CartService) AddItemToCart(ctx context.Context, _a1 request.CartItemRequest) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, request.CartItemRequest) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteItemFromCart provides a mock function with given fields: ctx, itemID
func (_m *CartService) DeleteItemFromCart(ctx context.Context, itemID int) error {
	ret := _m.Called(ctx, itemID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, itemID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCartByID provides a mock function with given fields: ctx, id
func (_m *CartService) GetCartByID(ctx context.Context, id int) (model.Cart, error) {
	ret := _m.Called(ctx, id)

	var r0 model.Cart
	if rf, ok := ret.Get(0).(func(context.Context, int) model.Cart); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Cart)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerCart provides a mock function with given fields: ctx, customerID
func (_m *CartService) GetCustomerCart(ctx context.Context, customerID int) (model.Cart, error) {
	ret := _m.Called(ctx, customerID)

	var r0 model.Cart
	if rf, ok := ret.Get(0).(func(context.Context, int) model.Cart); ok {
		r0 = rf(ctx, customerID)
	} else {
		r0 = ret.Get(0).(model.Cart)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCartService interface {
	mock.TestingT
	Cleanup(func())
}

// NewCartService creates a new instance of CartService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCartService(t mockConstructorTestingTNewCartService) *CartService {
	mock := &CartService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
